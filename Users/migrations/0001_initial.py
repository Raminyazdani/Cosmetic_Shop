# Generated by Django 4.1.4 on 2023-01-20 17:06

import Core.ProjectMixins.Base.AbsoluteUrl
import Core.ProjectMixins.Base.Save
import Core.ProjectMixins.Base.Str
import Core.fields.BigAutos.Id
import Core.fields.Booleans.IsActive
import Core.fields.Booleans.IsAdmin
import Core.fields.Booleans.IsCustomer
import Core.fields.Booleans.IsDelete
import Core.fields.Booleans.IsMarket
import Core.fields.Booleans.IsStaff
import Core.fields.Booleans.IsSuperUser
import Core.fields.Booleans.IsVerified
import Core.fields.Chars.PhoneNumber
import Core.fields.DateTimes.CreatedAt
import Core.fields.DateTimes.ModifiedAt
import Core.fields.Slugs.Slug
import Users.managers
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this User record', primary_key=True, serialize=False, verbose_name='User`s Id')),
                ('phone_number', Core.fields.Chars.PhoneNumber.PhoneNumber(db_index=True, help_text='PhoneNumber of this User record', max_length=15, unique=True, validators=[django.core.validators.RegexValidator(message='must be a phone number with 10 digits', regex='^(\\+98|\\+980|0098|00980|0|)\\d{10}$')], verbose_name='User`s PhoneNumber')),
                ('is_costumer', Core.fields.Booleans.IsCustomer.IsCustomer(db_index=True, default=False, help_text='Is this User record has costumer profile ?', verbose_name='Is Costumer')),
                ('is_market', Core.fields.Booleans.IsMarket.IsMarket(db_index=True, default=False, help_text='Is this User record has market profile ?', verbose_name='Is Market')),
                ('is_staff', Core.fields.Booleans.IsStaff.IsStaff(db_index=True, default=False, help_text='Is this User record has staff permissions ?', verbose_name='Is Staff')),
                ('is_active', Core.fields.Booleans.IsActive.IsActive(db_index=True, default=True, help_text='Is this User record available ?', verbose_name='User`s availability')),
                ('is_admin', Core.fields.Booleans.IsAdmin.IsAdmin(db_index=True, default=False, help_text='Is this User record has admin permissions ?', verbose_name='Is Admin')),
                ('is_superuser', Core.fields.Booleans.IsSuperUser.IsSuperUser(db_index=True, default=False, help_text='Is this User record has super user permissions ?', verbose_name='Is Super User')),
                ('is_verified', Core.fields.Booleans.IsVerified.IsVerified(db_index=True, default=False, help_text='Is this User record verified ?', verbose_name='Verified')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Slugs of this User record', max_length=100, null=True, unique=True, verbose_name='User`s Slugs')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this User record has deleted ?', verbose_name='Is Delete')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this User record', null=True, verbose_name='User`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this User record', null=True, verbose_name='User`s ModifiedAt')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            bases=(models.Model, Core.ProjectMixins.Base.Save.SaveName, Core.ProjectMixins.Base.Save.SaveNormal, Core.ProjectMixins.Base.Str.PhoneNumber, Core.ProjectMixins.Base.AbsoluteUrl.UrlId),
            managers=[
                ('objects', Users.managers.CustomBaseUserManager()),
                ('subsets', Users.managers.CustomBaseUserManager()),
            ],
        ),
    ]
