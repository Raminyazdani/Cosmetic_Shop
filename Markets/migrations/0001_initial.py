# Generated by Django 4.1.4 on 2023-02-04 11:26

import Core.ProjectMixins.Apps.Markets_Mixins.ModelRequiredProperties
import Core.fields.BigAutos.Id
import Core.fields.Booleans.IsDelete
import Core.fields.Chars.FirstName
import Core.fields.Chars.Key
import Core.fields.Chars.LastName
import Core.fields.Chars.UserName
import Core.fields.Chars.Value
import Core.fields.DateTimes.CreatedAt
import Core.fields.DateTimes.DateClose
import Core.fields.DateTimes.DateFrom
import Core.fields.DateTimes.DateOpen
import Core.fields.DateTimes.DateTo
import Core.fields.DateTimes.DeletedOn
import Core.fields.DateTimes.ModifiedAt
import Core.fields.Decimals.PriceDollar
import Core.fields.Decimals.TotalPrice
import Core.fields.Emails.Email
import Core.fields.ForeignKeys.MarketForeignKey
import Core.fields.ManyToManys.InventoryItemManyToMany
import Core.fields.MultiSelects.WeekDays
import Core.fields.PositiveIntegers.StatusOrder
import Core.fields.PositiveIntegers.StatusPayment
import Core.fields.Slugs.Slug
import Core.fields.Texts.Bio
import Core.fields.Times.TimeClose
import Core.fields.Times.TimeFrom
import Core.fields.Times.TimeOpen
import Core.fields.Times.TimeTo
import Core.fields.UUIDs.UUID
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Inventory',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('date_open', Core.fields.DateTimes.DateOpen.DateOpen(blank=True, default=Core.fields.DateTimes.DateOpen.default_temp, help_text='DateOpen of this Inventory record', null=True, verbose_name='Inventory`s DateOpen')),
                ('date_close', Core.fields.DateTimes.DateClose.DateClose(blank=True, default=Core.fields.DateTimes.DateClose.default_temp, help_text='DateClose of this Inventory record', null=True, verbose_name='Inventory`s DateClose')),
                ('time_open', Core.fields.Times.TimeOpen.TimeOpen(blank=True, default=Core.fields.Times.TimeOpen.default_temp, help_text='TimeOpen of this Inventory record', null=True, verbose_name='Inventory`s TimeOpen')),
                ('time_close', Core.fields.Times.TimeClose.TimeClose(blank=True, default=Core.fields.Times.TimeClose.default_temp, help_text='TimeClose of this Inventory record', null=True, verbose_name='Inventory`s TimeClose')),
                ('weekdays', Core.fields.MultiSelects.WeekDays.WeekDays(blank='True', choices=[(0, 'Saturday'), (1, 'Sunday'), (2, 'Monday'), (3, 'Tuesday'), (4, 'Wednesday'), (5, 'Thursday'), (6, 'Friday')], db_index=True, default=[], help_text='WeekDays of this Inventory record', max_length=7, null='True', verbose_name='Inventory`s WeekDays')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Slugs of this Inventory record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Inventory`s Slugs')),
            ],
            options={
                'verbose_name': 'Inventory',
                'verbose_name_plural': 'Inventories',
            },
            bases=(Core.ProjectMixins.Apps.Markets_Mixins.ModelRequiredProperties.InventoryMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('price', Core.fields.Decimals.PriceDollar.PriceDollar(db_index=True, decimal_places=2, default=0.0, help_text='Inventory of this Item record', max_digits=10, verbose_name='Item`s Inventory')),
                ('tax_price', Core.fields.Decimals.PriceDollar.PriceDollar(db_index=True, decimal_places=2, default=0.0, help_text='Inventory of this Item record', max_digits=10, verbose_name='Item`s Inventory')),
                ('date_from', Core.fields.DateTimes.DateFrom.DateFrom(blank=True, default=Core.fields.DateTimes.DateFrom.default_temp, help_text='Inventory of this Item record', null=True, verbose_name='Item`s Inventory')),
                ('date_to', Core.fields.DateTimes.DateTo.DateTo(blank=True, default=Core.fields.DateTimes.DateTo.default_temp, help_text='Inventory of this Item record', null=True, verbose_name='Item`s Inventory')),
                ('time_from', Core.fields.Times.TimeFrom.TimeFrom(blank=True, default=Core.fields.Times.TimeFrom.default_temp, help_text='Inventory of this Item record', null=True, verbose_name='Item`s Inventory')),
                ('time_to', Core.fields.Times.TimeTo.TimeTo(blank=True, default=Core.fields.Times.TimeTo.default_temp, help_text='Inventory of this Item record', null=True, verbose_name='Item`s Inventory')),
                ('weekdays', Core.fields.MultiSelects.WeekDays.WeekDays(blank='True', choices=[(0, 'Saturday'), (1, 'Sunday'), (2, 'Monday'), (3, 'Tuesday'), (4, 'Wednesday'), (5, 'Thursday'), (6, 'Friday')], db_index=True, default=[], help_text='Inventory of this Item record', max_length=7, null='True', verbose_name='Item`s Inventory')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Inventory of this Item record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Item`s Inventory')),
            ],
            options={
                'verbose_name': 'Inventory Item',
                'verbose_name_plural': 'Inventory Items',
            },
            bases=(Core.ProjectMixins.Apps.Markets_Mixins.ModelRequiredProperties.InventoryitemMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InventoryItemPropertyItem',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
            ],
            options={
                'verbose_name': 'Inventory item property',
                'verbose_name_plural': 'Inventory item propertys',
            },
            bases=(Core.ProjectMixins.Apps.Markets_Mixins.ModelRequiredProperties.InventoryitempropertyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Market',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('firstname', Core.fields.Chars.FirstName.FirstName(blank=True, help_text='Firstname of this Market record', max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='must be a valid name with 3 to 30 characters', regex='^.{3,30}$')], verbose_name='Market`s Firstname')),
                ('lastname', Core.fields.Chars.LastName.LastName(blank=True, help_text='Lastname of this Market record', max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='must be a valid name with 3 to 30 characters', regex='^.{3,30}$')], verbose_name='Market`s Lastname')),
                ('user_name', Core.fields.Chars.UserName.UserName(blank=True, help_text='UserName of this Market record', max_length=30, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid username)', regex='^(?=.{4,32}$)(?![_.-])(?!.*[_.]{2})[a-zA-Z0-9._-]+(?<![_.])$')], verbose_name='Market`s UserName')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Slugs of this Market record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Market`s Slugs')),
                ('email', Core.fields.Emails.Email.Email(blank=True, help_text='Emails of this Market record', max_length=254, null=True, validators=[django.core.validators.RegexValidator(message='Must be an email)', regex="^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$")], verbose_name='Market`s Emails')),
                ('bio', Core.fields.Texts.Bio.Bio(blank=True, default='My Bio', help_text='BioField of this Market record', max_length=1000, null=True, verbose_name='Market`s BioField')),
            ],
            options={
                'verbose_name': 'Market',
                'verbose_name_plural': 'Markets',
            },
            bases=(Core.ProjectMixins.Apps.Markets_Mixins.ModelRequiredProperties.MarketMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PropertyItem',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('key', Core.fields.Chars.Key.Key(blank=True, help_text='Property of this Item record', max_length=30, null=True, verbose_name='Item`s Property')),
                ('value', Core.fields.Chars.Value.Value(blank=True, help_text='Property of this Item record', max_length=30, null=True, verbose_name='Item`s Property')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Property of this Item record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Item`s Property')),
                ('inventory_item', Core.fields.ManyToManys.InventoryItemManyToMany.InventoryItemManyToMany(blank=True, db_index=True, help_text='Property of this Item record', related_name='property_items', through='Markets.InventoryItemPropertyItem', to='Markets.inventoryitem', verbose_name='Item`s Property')),
            ],
            options={
                'verbose_name': 'Property',
                'verbose_name_plural': 'Properties',
            },
            bases=(Core.ProjectMixins.Apps.Markets_Mixins.ModelRequiredProperties.PropertyItemMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OrderMarket',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('status_order', Core.fields.PositiveIntegers.StatusOrder.StatusOrder(choices=[(0, 'Pending'), (1, 'Cancel'), (2, 'Done')], db_index=True, default=0, help_text='Order of this Market record', validators=[django.core.validators.MinValueValidator(0, message='Status order must be at least 0'), django.core.validators.MaxValueValidator(2, message='Status order must be at most 2')], verbose_name='Market`s Order')),
                ('total_price', Core.fields.Decimals.TotalPrice.TotalPrice(db_index=True, decimal_places=2, default=0.0, help_text='Order of this Market record', max_digits=10, verbose_name='Market`s Order')),
                ('status_payment', Core.fields.PositiveIntegers.StatusPayment.StatusPayment(choices=[(0, 'Pending'), (1, 'Cancel'), (2, 'Paid')], db_index=True, default=0, help_text='Order of this Market record', validators=[django.core.validators.MinValueValidator(0, message='Status payment must be at least 0'), django.core.validators.MaxValueValidator(2, message='Status payment must be at most 2')], verbose_name='Market`s Order')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Order of this Market record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Market`s Order')),
                ('market', Core.fields.ForeignKeys.MarketForeignKey.MarketForeignKey(blank=True, help_text='Order of this Market record', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='Markets.market', verbose_name='Market`s Order')),
            ],
            options={
                'verbose_name': 'Order Market',
                'verbose_name_plural': 'Orders Market',
            },
            bases=(Core.ProjectMixins.Apps.Markets_Mixins.ModelRequiredProperties.OrdermarketMixin, models.Model),
        ),
    ]
