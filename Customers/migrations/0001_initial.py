# Generated by Django 4.1.4 on 2023-02-04 11:26

import Core.ProjectMixins.Apps.Customers_Mixins.ModelRequiredProperties
import Core.fields.BigAutos.Id
import Core.fields.Booleans.IsDelete
import Core.fields.Booleans.IsEmailVerified
import Core.fields.Booleans.IsShippingFree
import Core.fields.Booleans.IsTaxFree
import Core.fields.Booleans.IsUsed
import Core.fields.Chars.Code
import Core.fields.Chars.FirstName
import Core.fields.Chars.LastName
import Core.fields.Chars.Name
import Core.fields.Chars.UserName
import Core.fields.DateTimes.CreatedAt
import Core.fields.DateTimes.DateFrom
import Core.fields.DateTimes.DateTo
import Core.fields.DateTimes.DeletedOn
import Core.fields.DateTimes.ModifiedAt
import Core.fields.Decimals.DiscountedPrice
import Core.fields.Decimals.FinalPrice
import Core.fields.Decimals.MaximumAmount
import Core.fields.Decimals.MinimumAmount
import Core.fields.Decimals.Tax
import Core.fields.Decimals.TotalPrice
import Core.fields.Emails.Email
import Core.fields.PositiveIntegers.CouponType
import Core.fields.PositiveIntegers.Gender
import Core.fields.PositiveIntegers.Percentage
import Core.fields.PositiveIntegers.Quantity
import Core.fields.PositiveIntegers.StatusOrder
import Core.fields.Slugs.Slug
import Core.fields.Texts.Bio
import Core.fields.UUIDs.UUID
import django.core.validators
from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Slugs of this Cart record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Cart`s Slugs')),
            ],
            options={
                'verbose_name': 'Cart',
                'verbose_name_plural': 'Carts',
            },
            bases=(Core.ProjectMixins.Apps.Customers_Mixins.ModelRequiredProperties.CartMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Cart of this Item record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Item`s Cart')),
                ('quantity', Core.fields.PositiveIntegers.Quantity.Quantity(db_index=True, default=0, help_text='Cart of this Item record', validators=[django.core.validators.MinValueValidator(0, message='Quantity must be at least 0')], verbose_name='Item`s Cart')),
            ],
            options={
                'verbose_name': 'Cart item',
                'verbose_name_plural': 'Cart items',
            },
            bases=(Core.ProjectMixins.Apps.Customers_Mixins.ModelRequiredProperties.CartItemMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('name', Core.fields.Chars.Name.Name(blank=True, db_index=True, help_text='Name of this Coupon record', max_length=30, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='must be a valid name with 3 to 30 characters', regex='^.{3,30}$')], verbose_name='Coupon`s Name')),
                ('date_from', Core.fields.DateTimes.DateFrom.DateFrom(blank=True, default=Core.fields.DateTimes.DateFrom.default_temp, help_text='DateFrom of this Coupon record', null=True, verbose_name='Coupon`s DateFrom')),
                ('date_to', Core.fields.DateTimes.DateTo.DateTo(blank=True, default=Core.fields.DateTimes.DateTo.default_temp, help_text='DateTo of this Coupon record', null=True, verbose_name='Coupon`s DateTo')),
                ('code', Core.fields.Chars.Code.Code(blank=True, default=uuid.uuid4, help_text='Code of this Coupon record', max_length=36, null=True, validators=[django.core.validators.RegexValidator(message='Must be a valid uuid4)', regex='^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$')], verbose_name='Coupon`s Code')),
                ('coupon_type', Core.fields.PositiveIntegers.CouponType.CouponType(choices=[(0, 'Percent'), (1, 'Amount')], db_index=True, default=0, help_text='CouponType of this Coupon record', validators=[django.core.validators.MinValueValidator(0, message='Coupon type must be at least 0'), django.core.validators.MaxValueValidator(1, message='Coupon type must be at most 1')], verbose_name='Coupon`s CouponType')),
                ('minimum_amount', Core.fields.Decimals.MinimumAmount.MinimumAmount(db_index=True, decimal_places=2, default=0.0, help_text='MinimumAmount of this Coupon record', max_digits=10, verbose_name='Coupon`s MinimumAmount')),
                ('maximum_amount', Core.fields.Decimals.MaximumAmount.MaximumAmount(db_index=True, decimal_places=2, default=0.0, help_text='MaximumAmount of this Coupon record', max_digits=10, verbose_name='Coupon`s MaximumAmount')),
                ('percentage', Core.fields.PositiveIntegers.Percentage.Percentage(db_index=True, default=0, help_text='Percentage of this Coupon record', validators=[django.core.validators.MinValueValidator(0, message='Percent must be at least 0'), django.core.validators.MaxValueValidator(100, message='Percent must be at most 100')], verbose_name='Coupon`s Percentage')),
                ('is_tax_free', Core.fields.Booleans.IsTaxFree.IsTaxFree(db_index=True, default=False, help_text='Is this Coupon record tax free ?', verbose_name='Tax Free')),
                ('is_shipping_free', Core.fields.Booleans.IsShippingFree.IsShippingFree(db_index=True, default=False, help_text='Is this Coupon record shiping free ?', verbose_name='Shipping free')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Slugs of this Coupon record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Coupon`s Slugs')),
            ],
            options={
                'verbose_name': 'Coupon',
                'verbose_name_plural': 'Coupons',
            },
            bases=(Core.ProjectMixins.Apps.Customers_Mixins.ModelRequiredProperties.CouponMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('firstname', Core.fields.Chars.FirstName.FirstName(blank=True, help_text='Firstname of this Customer record', max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='must be a valid name with 3 to 30 characters', regex='^.{3,30}$')], verbose_name='Customer`s Firstname')),
                ('lastname', Core.fields.Chars.LastName.LastName(blank=True, help_text='Lastname of this Customer record', max_length=30, null=True, validators=[django.core.validators.RegexValidator(message='must be a valid name with 3 to 30 characters', regex='^.{3,30}$')], verbose_name='Customer`s Lastname')),
                ('user_name', Core.fields.Chars.UserName.UserName(blank=True, help_text='UserName of this Customer record', max_length=30, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid username)', regex='^(?=.{4,32}$)(?![_.-])(?!.*[_.]{2})[a-zA-Z0-9._-]+(?<![_.])$')], verbose_name='Customer`s UserName')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Slugs of this Customer record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Customer`s Slugs')),
                ('gender', Core.fields.PositiveIntegers.Gender.GenderHuman(choices=[(0, 'Not Binary'), (1, 'For men'), (2, 'For women')], db_index=True, default=0, help_text='Gender of this Customer record', validators=[django.core.validators.MinValueValidator(0, message='Gender is integer ,must be at least 0'), django.core.validators.MaxValueValidator(2, message='Gender is integer ,must be at most 2')], verbose_name='Customer`s Gender')),
                ('email', Core.fields.Emails.Email.Email(blank=True, help_text='Emails of this Customer record', max_length=254, null=True, validators=[django.core.validators.RegexValidator(message='Must be an email)', regex="^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$")], verbose_name='Customer`s Emails')),
                ('is_email_verified', Core.fields.Booleans.IsEmailVerified.IsEmailVerified(db_index=True, default=False, help_text='Is this Customer record verified ?', verbose_name='Verified')),
                ('bio', Core.fields.Texts.Bio.Bio(blank=True, default='My Bio', help_text='BioField of this Customer record', max_length=1000, null=True, verbose_name='Customer`s BioField')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
            },
            bases=(Core.ProjectMixins.Apps.Customers_Mixins.ModelRequiredProperties.CustomerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CustomerCoupon',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_used', Core.fields.Booleans.IsUsed.IsUsed(db_index=True, default=False, help_text='Is this CustomerCoupon record used ?', verbose_name='Used')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Customer of this Coupon record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Coupon`s Customer')),
            ],
            options={
                'verbose_name': 'Customer coupon',
                'verbose_name_plural': 'Customer coupons',
            },
            bases=(Core.ProjectMixins.Apps.Customers_Mixins.ModelRequiredProperties.CustomerCouponMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Slugs of this Favorite record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Favorite`s Slugs')),
            ],
            options={
                'verbose_name': 'Favorite',
                'verbose_name_plural': 'Favorites',
            },
            bases=(Core.ProjectMixins.Apps.Customers_Mixins.ModelRequiredProperties.FavoriteMixin, models.Model),
        ),
        migrations.CreateModel(
            name='FavoriteItem',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Favorite of this Item record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Item`s Favorite')),
            ],
            options={
                'verbose_name': 'Favorite Item',
                'verbose_name_plural': 'Favorite Items',
            },
            bases=(Core.ProjectMixins.Apps.Customers_Mixins.ModelRequiredProperties.FavoriteitemMixin, models.Model),
        ),
        migrations.CreateModel(
            name='OrderCustomer',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('status_order', Core.fields.PositiveIntegers.StatusOrder.StatusOrder(choices=[(0, 'Pending'), (1, 'Cancel'), (2, 'Done')], db_index=True, default=0, editable=False, help_text='Order of this Customer record', validators=[django.core.validators.MinValueValidator(0, message='Status order must be at least 0'), django.core.validators.MaxValueValidator(2, message='Status order must be at most 2')], verbose_name='Customer`s Order')),
                ('total_price', Core.fields.Decimals.TotalPrice.TotalPrice(db_index=True, decimal_places=2, default=0.0, editable=False, help_text='Order of this Customer record', max_digits=10, verbose_name='Customer`s Order')),
                ('tax', Core.fields.Decimals.Tax.Tax(db_index=True, decimal_places=2, default=0.0, editable=False, help_text='Order of this Customer record', max_digits=10, verbose_name='Customer`s Order')),
                ('discounted_price', Core.fields.Decimals.DiscountedPrice.DiscountedPrice(db_index=True, decimal_places=2, default=0.0, editable=False, help_text='Order of this Customer record', max_digits=10, verbose_name='Customer`s Order')),
                ('final_price', Core.fields.Decimals.FinalPrice.FinalPrice(db_index=True, decimal_places=2, default=0.0, editable=False, help_text='Order of this Customer record', max_digits=10, verbose_name='Customer`s Order')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Order of this Customer record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Customer`s Order')),
            ],
            options={
                'verbose_name': 'Order Customer',
                'verbose_name_plural': 'Order Customers',
            },
            bases=(Core.ProjectMixins.Apps.Customers_Mixins.ModelRequiredProperties.OrdercustomerMixin, models.Model),
        ),
        migrations.CreateModel(
            name='WishList',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Wish of this List record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='List`s Wish')),
            ],
            options={
                'verbose_name': 'Wish list',
                'verbose_name_plural': 'Wish lists',
            },
            bases=(Core.ProjectMixins.Apps.Customers_Mixins.ModelRequiredProperties.WishlistMixin, models.Model),
        ),
        migrations.CreateModel(
            name='WishListItem',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Wish of this List record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='List`s Wish')),
            ],
            options={
                'verbose_name': 'Wish List Item',
                'verbose_name_plural': 'Wish List Items',
            },
            bases=(Core.ProjectMixins.Apps.Customers_Mixins.ModelRequiredProperties.WishlistitemMixin, models.Model),
        ),
    ]
