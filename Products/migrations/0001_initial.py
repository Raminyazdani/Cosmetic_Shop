# Generated by Django 4.1.4 on 2023-02-04 11:26

import Core.ProjectMixins.Apps.Products_Mixins.ModelRequiredProperties
import Core.fields.BigAutos.Id
import Core.fields.Booleans.IsAvailable
import Core.fields.Booleans.IsDelete
import Core.fields.Chars.Name
import Core.fields.Chars.ShortDescription
import Core.fields.Chars.Title
import Core.fields.DateTimes.CreatedAt
import Core.fields.DateTimes.DeletedOn
import Core.fields.DateTimes.ModifiedAt
import Core.fields.ForeignKeys.BrandForeignKey
import Core.fields.ForeignKeys.CategoryForeignKey
import Core.fields.ForeignKeys.CustomerForeignKey
import Core.fields.ForeignKeys.ParentForeignKey
import Core.fields.ForeignKeys.ProductForeignKey
import Core.fields.ForeignKeys.TagForeignKey
import Core.fields.ManyToManys.BrandManyToMany
import Core.fields.ManyToManys.CategoryManyToMany
import Core.fields.ManyToManys.ProductManyToMany
import Core.fields.ManyToManys.TagManyToMany
import Core.fields.PositiveIntegers.Gender
import Core.fields.PositiveIntegers.Rating
import Core.fields.Slugs.Slug
import Core.fields.Texts.Body
import Core.fields.Texts.Description
import Core.fields.UUIDs.UUID
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Customers', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('name', Core.fields.Chars.Name.Name(db_index=True, help_text='Name of this Brand record', max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='must be a valid name with 3 to 30 characters', regex='^.{3,30}$')], verbose_name='Brand`s Name')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Slugs of this Brand record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Brand`s Slugs')),
                ('is_available', Core.fields.Booleans.IsAvailable.IsAvailable(db_index=True, default=True, help_text='Is this Brand record available ?', verbose_name='Brand`s availability')),
                ('description', Core.fields.Texts.Description.Description(blank=True, help_text='Description of this Brand record', max_length=1000, null=True, validators=[django.core.validators.MinLengthValidator(10, message='Description must be at least 10 characters'), django.core.validators.MaxLengthValidator(1000, message='Description must be at most 1000 characters')], verbose_name='Brand`s Description')),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
            },
            bases=(Core.ProjectMixins.Apps.Products_Mixins.ModelRequiredProperties.BrandMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('name', Core.fields.Chars.Name.Name(db_index=True, help_text='Name of this Category record', max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='must be a valid name with 3 to 30 characters', regex='^.{3,30}$')], verbose_name='Category`s Name')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Slugs of this Category record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Category`s Slugs')),
                ('description', Core.fields.Texts.Description.Description(blank=True, help_text='Description of this Category record', max_length=1000, null=True, validators=[django.core.validators.MinLengthValidator(10, message='Description must be at least 10 characters'), django.core.validators.MaxLengthValidator(1000, message='Description must be at most 1000 characters')], verbose_name='Category`s Description')),
                ('parent', Core.fields.ForeignKeys.ParentForeignKey.ParentForeignKey(blank=True, help_text='Parent of this Category record', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='childs', to='Products.category', verbose_name='Category`s Parent')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
            bases=(Core.ProjectMixins.Apps.Products_Mixins.ModelRequiredProperties.CategoryMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('name', Core.fields.Chars.Name.Name(db_index=True, help_text='Name of this Product record', max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='must be a valid name with 3 to 30 characters', regex='^.{3,30}$')], verbose_name='Product`s Name')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Slugs of this Product record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Product`s Slugs')),
                ('short_description', Core.fields.Chars.ShortDescription.ShortDescription(help_text='ShortDescription of this Product record', max_length=100, validators=[django.core.validators.MinLengthValidator(3, message='Short description must be at least 3 characters'), django.core.validators.MaxLengthValidator(100, message='Short description must be at most 100 characters')], verbose_name='Product`s ShortDescription')),
                ('description', Core.fields.Texts.Description.Description(blank=True, help_text='Description of this Product record', max_length=1000, null=True, validators=[django.core.validators.MinLengthValidator(10, message='Description must be at least 10 characters'), django.core.validators.MaxLengthValidator(1000, message='Description must be at most 1000 characters')], verbose_name='Product`s Description')),
                ('is_available', Core.fields.Booleans.IsAvailable.IsAvailable(db_index=True, default=True, help_text='Is this Product record available ?', verbose_name='Product`s availability')),
                ('gender', Core.fields.PositiveIntegers.Gender.Gender(choices=[(0, 'Gender free'), (1, 'For men'), (2, 'For women')], db_index=True, default=0, help_text='Gender of this Product record', validators=[django.core.validators.MinValueValidator(0, message='Gender is integer ,must be at least 0'), django.core.validators.MaxValueValidator(2, message='Gender is integer ,must be at most 2')], verbose_name='Product`s Gender')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
            bases=(Core.ProjectMixins.Apps.Products_Mixins.ModelRequiredProperties.ProductMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ProductTag',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('product_id', Core.fields.ForeignKeys.ProductForeignKey.ProductForeignKey(blank=True, help_text='Product of this Tag record', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_tags', to='Products.product', verbose_name='Tag`s Product')),
            ],
            options={
                'verbose_name': 'Product | Tag',
                'verbose_name_plural': 'Products | Tags',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('name', Core.fields.Chars.Name.Name(db_index=True, help_text='Name of this Tag record', max_length=30, unique=True, validators=[django.core.validators.RegexValidator(message='must be a valid name with 3 to 30 characters', regex='^.{3,30}$')], verbose_name='Tag`s Name')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Slugs of this Tag record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Tag`s Slugs')),
                ('product', Core.fields.ManyToManys.ProductManyToMany.ProductManyToMany(blank=True, db_index=True, help_text='Product of this Tag record', related_name='tags', through='Products.ProductTag', to='Products.product', verbose_name='Tag`s Product')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
            bases=(Core.ProjectMixins.Apps.Products_Mixins.ModelRequiredProperties.TagMixin, models.Model),
        ),
        migrations.AddField(
            model_name='producttag',
            name='tag_id',
            field=Core.fields.ForeignKeys.TagForeignKey.TagForeignKey(blank=True, help_text='Product of this Tag record', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_tags', to='Products.tag', verbose_name='Tag`s Product'),
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('category_id', Core.fields.ForeignKeys.CategoryForeignKey.CategoryForeignKey(blank=True, help_text='Product of this Category record', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_categorys', to='Products.category', verbose_name='Category`s Product')),
                ('product_id', Core.fields.ForeignKeys.ProductForeignKey.ProductForeignKey(blank=True, help_text='Product of this Category record', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_categorys', to='Products.product', verbose_name='Category`s Product')),
            ],
            options={
                'verbose_name': 'Product | Category',
                'verbose_name_plural': 'Products | Categories',
            },
        ),
        migrations.CreateModel(
            name='ProductBrand',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('brand_id', Core.fields.ForeignKeys.BrandForeignKey.BrandForeignKey(blank=True, help_text='Product of this Brand record', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_brands', to='Products.brand', verbose_name='Brand`s Product')),
                ('product_id', Core.fields.ForeignKeys.ProductForeignKey.ProductForeignKey(blank=True, help_text='Product of this Brand record', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='product_brands', to='Products.product', verbose_name='Brand`s Product')),
            ],
            options={
                'verbose_name': 'Product | Brand',
                'verbose_name_plural': 'Products | Brands',
            },
        ),
        migrations.AddField(
            model_name='product',
            name='brand',
            field=Core.fields.ManyToManys.BrandManyToMany.BrandManyToMany(blank=True, db_index=True, help_text='Brand of this Product record', related_name='products', through='Products.ProductBrand', to='Products.brand', verbose_name='Product`s Brand'),
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=Core.fields.ManyToManys.CategoryManyToMany.CategoryManyToMany(blank=True, db_index=True, help_text='Category of this Product record', related_name='products', through='Products.ProductCategory', to='Products.category', verbose_name='Product`s Category'),
        ),
        migrations.AddField(
            model_name='product',
            name='tag',
            field=Core.fields.ManyToManys.TagManyToMany.TagManyToMany(blank=True, db_index=True, help_text='Tag of this Product record', related_name='products', through='Products.ProductTag', to='Products.tag', verbose_name='Product`s Tag'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', Core.fields.BigAutos.Id.Id(db_index=True, help_text='Id of this Model record', primary_key=True, serialize=False, unique=True, verbose_name='Model`s Id')),
                ('uuid', Core.fields.UUIDs.UUID.UUID(blank=True, default=uuid.uuid4, editable=False, help_text='UUID of this Model record', verbose_name='Model`s UUID')),
                ('created_at', Core.fields.DateTimes.CreatedAt.CreatedAt(auto_now_add=True, help_text='CreatedAt of this Model record', null=True, verbose_name='Model`s CreatedAt')),
                ('modified_at', Core.fields.DateTimes.ModifiedAt.ModifiedAt(auto_now=True, help_text='ModifiedAt of this Model record', null=True, verbose_name='Model`s ModifiedAt')),
                ('is_delete', Core.fields.Booleans.IsDelete.IsDelete(db_index=True, default=False, help_text='Is this Model record has deleted ?', verbose_name='Is Delete')),
                ('deleted_on', Core.fields.DateTimes.DeletedOn.DeletedOn(blank=True, help_text='DeletedOn of this Model record', null=True, verbose_name='Model`s DeletedOn')),
                ('title', Core.fields.Chars.Title.Title(help_text='Title of this Comment record', max_length=20, validators=[django.core.validators.RegexValidator(message='Title must be a valid string with 3 to 20 characters', regex='^.{3,20}$')], verbose_name='Comment`s Title')),
                ('body', Core.fields.Texts.Body.Body(help_text='Body of this Comment record', max_length=250, validators=[django.core.validators.MinLengthValidator(10, message='Body must be at least 10 characters'), django.core.validators.MaxLengthValidator(250, message='Body must be at most 250 characters')], verbose_name='Comment`s Body')),
                ('rating', Core.fields.PositiveIntegers.Rating.Rating(db_index=True, default=0, help_text='Rating of this Comment record', validators=[django.core.validators.MinValueValidator(0, message='Rating must be at least 0'), django.core.validators.MaxValueValidator(10, message='Rating must be at most 10')], verbose_name='Comment`s Rating')),
                ('slug', Core.fields.Slugs.Slug.Slug(blank=True, help_text='Slugs of this Comment record', max_length=100, null=True, unique=True, validators=[django.core.validators.RegexValidator(message='Must be a valid slug)', regex='^[-a-zA-Z0-9_]+$')], verbose_name='Comment`s Slugs')),
                ('author', Core.fields.ForeignKeys.CustomerForeignKey.CustomerForeignKey(blank=True, help_text='Author id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='Customers.customer', verbose_name='Author')),
                ('product', Core.fields.ForeignKeys.ProductForeignKey.ProductForeignKey(blank=True, help_text='Product of this Comment record', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='Products.product', verbose_name='Comment`s Product')),
            ],
            options={
                'verbose_name': 'Product | Comment',
                'verbose_name_plural': 'Products | Comments',
            },
            bases=(Core.ProjectMixins.Apps.Products_Mixins.ModelRequiredProperties.CommentMixin, models.Model),
        ),
        migrations.AddField(
            model_name='category',
            name='product',
            field=Core.fields.ManyToManys.ProductManyToMany.ProductManyToMany(blank=True, db_index=True, help_text='Product of this Category record', related_name='categorys', through='Products.ProductCategory', to='Products.product', verbose_name='Category`s Product'),
        ),
        migrations.AddField(
            model_name='brand',
            name='product',
            field=Core.fields.ManyToManys.ProductManyToMany.ProductManyToMany(blank=True, db_index=True, help_text='Product of this Brand record', related_name='brands', through='Products.ProductBrand', to='Products.product', verbose_name='Brand`s Product'),
        ),
    ]
